TS, if we don't pass a type, will assign a type automatically by recognize what value is assigned (Inference)
TS data types:
    Boolean:
        let is_admin: boolean = true;
    Number:
        let score: number = 100;
    String:
        let user: string = 'Danio';
    Array:
        Ex array of strings
        let users: string[] = ["Hello", "Ciao"];
    Tuple:
        Allows to manage arrays with types and total elements fixed
        let person: [string, number] = ["Danio", 28];
    Enum:
        Allows to define set of nominal constant
        enum Direction {
            Up,
            Down,
            Left,
            Right
        }
        let dir: Direction = Direction.Left;
    Any:
        The value can be any type
        let unknown_value: any = "I can be everything";
    Void:
        When a function returns nothing
        function log(): void {
            console.log('Hello');
        }
    Null, Undefined:
        let absent: null = null;
        let not_defined: undefined = undefined;

Advanced types:
    Union Type: 
        Allows to assign multiple type to a var
        let mix: string | number | boolean;
        mix = 12;
        mix = 'Hello';
        mix = true;
    Intersection types:
        Combine types to create a new type that have the property of both
        type Employee = BusinessPartner & Identity
    Type Aliases:
        Assign a name to an already existing type. Perfect to make easier to read complex types.
        type alphanumeric = string | number;
        let input: alphanumeric;
    Literal Types:
        Restrict to a more specific types
        for example click_event can only be a string "click" or "dbclick"
        let click_event: "click" | "dbclick"
    Type Guards:
        Are function that make a control type at runtime. Ex isNumber function
    Nullable Types:
        We can say a var can also be null, like we have see in Union Type
        let x: number | null = null;
    Types Assertions:
        Helps us to tells to typescript a var type if we are sure of a type but TS not, for example when we take an element from the DOM
    Generics:
        Allows us to create components that can work with any type

Polymorphism: 
    Polymorphism in programming allows objects of different types to be treated as if they were the same type, typically through a common interface or superclass. It enables a single function, method, or operator to work in different ways depending on the context or the data it operates on.

    There are two main types of polymorphism:

    Compile-time (static) polymorphism: Achieved through method overloading or operator overloading. This happens when the same function name can have different versions depending on parameters (e.g., functions with the same name but different argument types).

    Run-time (dynamic) polymorphism: Achieved through inheritance and interfaces, where a subclass can override a method of the parent class, and the appropriate method is called based on the object's type at runtime.

Decorators:
    Experimental functionality of TS that allows us to annotate and edit class and property directly in the code declaration. They are using principally in the metaprogramming.
    Use cases:
        - logging and debugging, for example, to register automatically method calls
        - validation
        - dependency injection, in framework like angular, decorators make easier dependency injection
        - mapping and serialization, automatize mapping between object and their serialization in json
    Limitations:
        - standardization: decorators are not standardized in ecmascript and there can be compatibility problem
        - complexity and performance, use a lot of decorator can be based
        - tech limitation, not every type of decorators are supported in every context

Metaprogramming: 
    Programming programs. It's a tecnique where a program can use other programs like his data. So the program can use, analyze other programs data.